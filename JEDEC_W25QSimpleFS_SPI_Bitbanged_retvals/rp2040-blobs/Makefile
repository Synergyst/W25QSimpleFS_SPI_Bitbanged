# Bare-metal ARM toolchain
CROSS     ?= arm-none-eabi-
CXX       := $(CROSS)g++
AS        := $(CROSS)as
OBJCOPY   := $(CROSS)objcopy
READELF   := $(CROSS)readelf
XXD       := xxd
SED       := sed

# Mailbox config (override on cmdline if desired)
MAILBOX_ADDR ?= 0x20040000   # Scratch Y
MAILBOX_MAX  ?= 512          # bytes reserved

# Pass config to C++
CXXDEFS   := -DINFO_ADDR=$(MAILBOX_ADDR) -DINFO_MAX=$(MAILBOX_MAX) -DWRITE_INFO_ALWAYS=1

# Cortex-M0+ / Thumb
CXXFLAGS  := -mcpu=cortex-m0plus -mthumb -Os -ffreestanding \
             -fno-exceptions -fno-rtti -fno-builtin \
             -fomit-frame-pointer -fno-asynchronous-unwind-tables -fno-unwind-tables \
             -fno-lto -fno-pic -fno-plt -fno-pie -fno-stack-protector \
             -fno-function-sections -fno-data-sections \
             -Wall -Wextra -Werror $(CXXDEFS)

ASFLAGS   := -mcpu=cortex-m0plus -mthumb

# Sources in current directory
SRCS_CPP  := $(wildcard *.cpp)
SRCS_S    := $(wildcard *.s)
NAMES_CPP := $(basename $(notdir $(SRCS_CPP)))
NAMES_S   := $(basename $(notdir $(SRCS_S)))
ALL_NAMES := $(sort $(NAMES_CPP) $(NAMES_S))

# Outputs
BUILD_DIR := build
ASMS_CPP  := $(addprefix $(BUILD_DIR)/,$(addsuffix .s,$(NAMES_CPP)))
OBJS_CPP  := $(addprefix $(BUILD_DIR)/,$(addsuffix .o,$(NAMES_CPP)))
OBJS_S    := $(addprefix $(BUILD_DIR)/,$(addsuffix .o,$(NAMES_S)))
BINS      := $(addsuffix .bin,$(ALL_NAMES))
HEADERS   := $(addprefix blob_,$(addsuffix .h,$(ALL_NAMES)))
CFG_HDR   := blob_mailbox_config.h

.PHONY: all clean verify

all: $(CFG_HDR) $(HEADERS)

# Generate a shared config header for your Arduino sketch
$(CFG_HDR):
	@echo "/* Autogenerated. RP2040 blob mailbox config. */" > $@
	@echo "#pragma once" >> $@
	@echo "#define BLOB_MAILBOX_ADDR $(MAILBOX_ADDR)u" >> $@
	@echo "#define BLOB_MAILBOX_MAX  $(MAILBOX_MAX)u"  >> $@
	@echo "// Region: [BLOB_MAILBOX_ADDR .. BLOB_MAILBOX_ADDR + BLOB_MAILBOX_MAX - 1]" >> $@
	@echo "Generated $@"

# Generate assembly from C++  <-- use -S (not -c)
$(BUILD_DIR)/%.s: %.cpp | $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) -S $< -o $@

# Assemble C++-generated assembly
$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.s
	$(AS) $(ASFLAGS) -o $@ $<

# Assemble raw .s in PWD
$(BUILD_DIR)/%.o: %.s | $(BUILD_DIR)
	$(AS) $(ASFLAGS) -o $@ $<

# Objcopy to flat binary (include text + rodata)
%.bin: $(BUILD_DIR)/%.o
	$(OBJCOPY) -O binary -j .text -j .text.* -j .rodata -j .rodata.* $< $@

# Convert .bin to header and rename symbols generically
blob_%.h: %.bin
	$(XXD) -i $< > $@.tmp
	$(SED) -E 's/unsigned char ([A-Za-z0-9_]+)_bin/const uint8_t blob_\1/g; s/unsigned int ([A-Za-z0-9_]+)_bin_len/const unsigned int blob_\1_len/g' $@.tmp > $@
	rm -f $@.tmp
	@echo "Generated $@"

# Optional: check there are no relocations left in the objects we used
verify: $(addprefix $(BUILD_DIR)/,$(addsuffix .o,$(ALL_NAMES)))
	@set -e; \
	for o in $^; do \
		echo "Checking $$o"; \
		$(READELF) -r $$o | awk 'BEGIN{ok=1} /Relocation section/ {ok=0} END{exit ok}'; \
	done && echo "OK: no relocations in objects."

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

clean:
	rm -rf $(BUILD_DIR) *.bin blob_*.h $(CFG_HDR)
